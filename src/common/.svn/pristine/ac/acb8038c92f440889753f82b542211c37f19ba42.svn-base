package common;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.UUID;

/**
 * IUser interface defines a set of operations of a user in our chatApp
 * IUser is NOT transmitted to anyone. ONLY the STUB of this Remote object is ever transmitted.
 */
public interface IUser extends Remote{
	
	/**
	 * The name the IUser object will be bound to in the RMI Registry
	 */
	public static final String BOUND_NAME = "USER";

	/**
	 * The port that the client will use to communicate with the IUser object
	 * Note that this port must be opened of inbound traffic on the server machine
	 */
	public static final int BOUND_PORT = 2100;
	
	/**
	 * Get the name of the user.
	 * Typically, this name is a combination of user's name and his/her ip address
	 * so that it can be used to identify the user 
	 * @return The name of the user
	 * @throws RemoteException if a network error occurs
	 */
	public String getName() throws RemoteException;
	
	/**
	 * Get UUid of the user, which is a unique identifier for the user
	 * @return uuid of the user
	 * @throws RemoteException
	 */
	public UUID getUUid() throws RemoteException;
	
	/**
	 * Get all chat rooms the user has joined.
	 * @return All chat rooms the user has joined
	 * @throws RemoteException if a network error occurs
	 */
	public Iterable<IChatRoom> getChatRooms() throws RemoteException;
	
	
	/**
	 * A method to be called by remote user for auto-connect-back
	 * @param userStub A remote user stub
	 * @throws RemoteException if a network error occurs 
	 */
	public void connect(IUser userStub) throws RemoteException;
	
	/***********************************
	 * Recommended methods for a preferred implementation.
	 * Not part of the API
	 ***********************************/
//	
//	/**
//	 * Join a chat room specified by the input parameter chatRoom
//	 * @param chatRoom the chat room to join
//	 * @return False if the user is already in the chat room; True if successfully join the chat room
//	 * @throws RemoteException if a network error occurs
//	 */
//	public boolean joinChatRoom(IChatRoom chatRoom) throws RemoteException;
//	
//	/**
//	 * Leave a chat room the user has joined before
//	 * @param charRoom the chat room to leave
//	 * @return False if the user is actually not in the chat room; True if successfully leave the chat room
//	 * @throws RemoteException if a network error occurs
//	 */
//	public boolean leaveChatRoom(IChatRoom charRoom) throws RemoteException;
//	
//	/**
//	 * Create a chat room. The user who created the chat room should 
//	 * be the only member in the chat room before anyone else can join.
//	 * @param name The name of the chat room
//	 * @return A new chat room object
//	 * @throws RemoteException if a network error occurs 
//	 */
//	public IChatRoom createChatRoom(String name)  throws RemoteException;
//	
//	/**
//	 * Send a data packet to a chat room, i.e. all remote receivers in the chat room.
//	 * @param data the data packet
//	 * @param cr the chat room
//	 * @throws RemoteException if a network error occurs 
//	 */
//	public void sendPacket(DataPacketChatRoom<?> data, IChatRoom cr)  throws RemoteException;

}
